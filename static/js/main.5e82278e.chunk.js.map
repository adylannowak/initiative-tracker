{"version":3,"sources":["AddCharacter/index.js","RoundAndTurn/index.js","InitiativeList/Character.js","InitiativeList/EditCharacter.js","InitiativeList/MyDivider.js","InitiativeList/index.js","Storage/index.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","characterAdd","width","maxWidth","backgroundColor","palette","background","paper","AddCharacter","props","useState","newName","setNewName","newInitiative","setNewInitiative","handleClick","classes","className","autoComplete","TextField","id","label","value","onChange","event","target","type","Button","onClick","RoundAndTurn","count","currentTurn","setCurrentTurn","roundNumber","setRoundNumber","Typography","noWrap","e","nextTurn","disabled","Character","character","IconButton","ListItemText","primary","name","secondary","initiative","EditCharacter","index","handleToggleEdit","handleChange","MyDivider","Divider","color","display","variant","message","InitiativeList","initiativeList","handleInitiativeToggleEdit","handleInitiativeListRemove","handleInitiativeListEdit","length","List","characterList","array","offset","tmp","slice","removed","splice","console","log","rearrangeList","map","ListItem","key","alignItems","editing","ListItemSecondaryAction","setItem","window","localStorage","root","App","setInitiativeList","sortByInitiative","list","sort","a","b","useEffect","JSON","parse","getItem","stringify","sortedList","concat","indexOf","lastIndexOf","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.5e82278e.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    characterAdd: {\r\n        width: '100%',\r\n        maxWidth: 360,\r\n        backgroundColor: theme.palette.background.paper,\r\n    }\r\n}));\r\n\r\nexport default function AddCharacter(props) {\r\n    const [newName, setNewName] = useState('');\r\n    const handleNewNameChange = event =>setNewName(event.target.value);\r\n  \r\n    const [newInitiative, setNewInitiative] = useState(1);\r\n    const handleNewInitiativeChange = event =>setNewInitiative(event.target.value);\r\n\r\n    const {handleClick} = props;\r\n    const classes = useStyles();\r\n\r\n\r\n\r\n    return (\r\n        <div className={classes.characterAdd} autoComplete=\"off\">\r\n            <TextField \r\n            id=\"character-name\" \r\n            label=\"Name\"\r\n            value={newName}\r\n            onChange={handleNewNameChange}\r\n            />\r\n            <TextField\r\n            id=\"initiative-result\"\r\n            label=\"Initiative\"\r\n            type=\"number\"\r\n            value={newInitiative}\r\n            onChange={handleNewInitiativeChange}\r\n            />\r\n            <Button\r\n            onClick={handleClick(newName,newInitiative)}\r\n            >Add</Button>  \r\n        </div>);\r\n}","import React, {useState} from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    RoundAndTurn: {\r\n        width: '100%',\r\n        maxWidth: 360,\r\n        backgroundColor: theme.palette.background.paper,\r\n    }\r\n}));\r\n\r\nexport default function RoundAndTurn(props) {\r\n    const {count, currentTurn, setCurrentTurn} = props;\r\n    const [roundNumber, setRoundNumber]=useState(1);\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.RoundAndTurn}>\r\n        <Typography noWrap>Round: {roundNumber}</Typography>\r\n        {(count)?\r\n        <>\r\n            <Button\r\n            onClick={e=>{\r\n                const nextTurn = (currentTurn+1)%count;\r\n                setCurrentTurn(nextTurn);\r\n                if(nextTurn===0) setRoundNumber(roundNumber+1)\r\n            }}>Next Turn</Button>\r\n            <Button\r\n            onClick={e=>{\r\n                const prevTurn = (currentTurn===0)?count-1:currentTurn-1;\r\n                setCurrentTurn(prevTurn);\r\n                if(currentTurn===0){ setRoundNumber(roundNumber-1) }\r\n            }}\r\n            disabled={(roundNumber<=1&&currentTurn===0)?true:false}\r\n            >Prev Turn</Button>\r\n            <Button\r\n            onClick={e=>{setRoundNumber(0);setCurrentTurn(0)}}>Reset</Button>\r\n         </>\r\n          :<Typography noWrap>Add a Character</Typography>}\r\n        </div>);\r\n}","import React from 'react';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nexport default function Character(props)\r\n{\r\n    const {character, handleClick} = props;\r\n    return (<>\r\n    <IconButton\r\n      onClick={handleClick}>\r\n      <EditIcon/>\r\n    </IconButton>\r\n    <ListItemText\r\n      primary={character.name}\r\n      secondary={character.initiative}\r\n    />\r\n  </>);\r\n}","import React from 'react';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nexport default function EditCharacter(props)\r\n{\r\n    const {index, character, handleToggleEdit, handleChange} = props;\r\n    return (\r\n    <>\r\n      <IconButton\r\n        onClick={handleToggleEdit}>\r\n        <SaveIcon/>\r\n      </IconButton>\r\n      <ListItemText\r\n        primary={<TextField \r\n          id={\"edit-name-\"+index} \r\n          label=\"Name\"\r\n          value={character.name}\r\n          onChange={handleChange(index,character)}\r\n          />}\r\n        secondary={\r\n          <TextField\r\n            id={\"edit-initiative-\"+index}\r\n            type=\"number\"\r\n            value={character.initiative}\r\n            onChange={handleChange(index,character)}\r\n          />}\r\n      />\r\n      </>);\r\n}","import React from 'react';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nexport default function MyDivider(props)\r\n{\r\n    return (<> <Divider/>\r\n        <li>\r\n          <Typography\r\n            color=\"textSecondary\"\r\n            display=\"block\"\r\n            variant=\"caption\"\r\n          >\r\n            {props.message}\r\n          </Typography>\r\n        </li>\r\n        </>);\r\n}","import React from 'react';\r\n\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nimport Character from './Character';\r\nimport EditCharacter from './EditCharacter';\r\nimport MyDivider from './MyDivider';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    InitiativeList: {\r\n        width: '100%',\r\n        maxWidth: 360,\r\n        backgroundColor: theme.palette.background.paper,\r\n    }\r\n}));\r\n\r\nexport default function InitiativeList(props) {\r\n\r\n    const {initiativeList, handleInitiativeToggleEdit, handleInitiativeListRemove, handleInitiativeListEdit, currentTurn} = props;\r\n    const classes = useStyles();\r\n\r\n    const rearrangeList = (array, offset)=>{let tmp = array.slice();let removed = tmp.splice(0,offset);console.log(\"array returning\",offset,[...tmp,...removed] ); return [...tmp,...removed]}\r\n\r\n    const count = initiativeList.length;    \r\n\r\n    return (\r\n        <List className={classes.characterList}>\r\n        {\r\n        rearrangeList(initiativeList,currentTurn).map((character,index)=>(\r\n        <>\r\n          {(index===0)?<MyDivider message={(currentTurn===0)?\"Current Turn Top of the Round\":\"Current Turn\"}/>:\r\n            (index===count-currentTurn)?<MyDivider message={\"Top of the Round\"}/>:null}\r\n          <ListItem \r\n            key={'character-'+index} \r\n            alignItems='flex-start'>\r\n            {(character.editing)?\r\n            <EditCharacter \r\n              index={(index+currentTurn)%count} \r\n              character={character} \r\n              handleToggleEdit={handleInitiativeToggleEdit((index+currentTurn)%count)} \r\n              handleChange={handleInitiativeListEdit}/>\r\n            :<Character \r\n              character={character} \r\n              handleClick={handleInitiativeToggleEdit((index+currentTurn)%count)}/>\r\n            }\r\n            <ListItemSecondaryAction>\r\n              <IconButton\r\n                onClick={handleInitiativeListRemove(index)}>\r\n                <DeleteIcon/>\r\n              </IconButton>\r\n            </ListItemSecondaryAction>\r\n          </ListItem>\r\n          </>))\r\n        }\r\n      </List>\r\n      );\r\n}","const storageID = \"initiative-tracker-\";\r\n\r\nconst setItem = (key, value)=>{\r\n    window.localStorage.setItem(storageID+key,value)\r\n};\r\n\r\nconst getItem = (key)=>{\r\n    return JSON.parse(window.localStorage.getItem(storageID+key));\r\n};\r\n\r\nexport {setItem, getItem};","import React, {useState, useEffect} from 'react';\n\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport './App.css';\n\nimport AddCharacter from './AddCharacter'\nimport RoundAndTurn from './RoundAndTurn'\nimport InitiativeList from './InitiativeList'\nimport { getItem, setItem } from './Storage';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width:'100%',\n    maxWidth: 360\n  },\n  characterList: {\n    width: '100%',\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n  },\n  characterAdd: {\n    width: '100%',\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n  }\n}));\n\n\nfunction App(props) {\n\n  const classes = useStyles();\n\n  const [initiativeList, setInitiativeList] = useState([(props.initiativeList)?props.initiativeList:[]]);\n  \n  const handleInitiativeListAdd = (name=\"Bob\",initiative=1)=>event=>{\n    const sortedList = sortByInitiative(initiativeList.concat({name, initiative, editing:false})); \n    setInitiativeList(sortedList);\n    setItem('initiativeList',JSON.stringify(sortedList));\n  };\n  const handleInitiativeToggleEdit = index=>event=>{\n    initiativeList[index].editing=!initiativeList[index].editing; \n    const sortedList=sortByInitiative(initiativeList.slice());\n    setInitiativeList(sortedList);\n    setItem('initiativeList',JSON.stringify(sortedList));}\n  const handleInitiativeListRemove = index=>event=>{\n    initiativeList.splice(index,1);\n    setInitiativeList(initiativeList.slice());\n    setItem('initiativeList',JSON.stringify(initiativeList));}\n  const handleInitiativeListEdit = (index,character)=>event=>{\n    let key = event.target.id.slice(event.target.id.indexOf(\"-\")+1,event.target.id.lastIndexOf(\"-\"));\n    initiativeList.splice(index,1,{...character,[key]:event.target.value});\n    setInitiativeList(initiativeList.slice());\n  }\n  const sortByInitiative=(list)=>{list.sort((a,b)=>b.initiative-a.initiative);return list;}\n\n  const [currentTurn, setCurrentTurn]=useState(0);\n\n  useEffect(()=>{\n    setInitiativeList(getItem('initiativeList')||[]);\n    return ()=>setItem('initiativeList',JSON.stringify(initiativeList));\n  },[]);\n\n  return (\n    <div className={classes.root}>\n      <AddCharacter \n        handleClick={handleInitiativeListAdd} />\n      <RoundAndTurn \n        count={initiativeList.length} \n        currentTurn={currentTurn} \n        setCurrentTurn={setCurrentTurn} />\n      <InitiativeList \n        initiativeList={initiativeList} \n        setInitiativeList={setInitiativeList}\n        handleInitiativeToggleEdit= {handleInitiativeToggleEdit}\n        handleInitiativeListRemove={handleInitiativeListRemove}\n        handleInitiativeListEdit={handleInitiativeListEdit}\n        currentTurn={currentTurn}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}