{"version":3,"sources":["AddCharacter/index.js","RoundAndTurn/index.js","InitiativeList/Character.js","InitiativeList/EditCharacter.js","InitiativeList/MyDivider.js","InitiativeList/index.js","Storage/index.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","characterAdd","width","maxWidth","backgroundColor","palette","background","paper","AddCharacter","props","console","log","useState","newName","setNewName","newInitiative","setNewInitiative","list","saveList","classes","className","autoComplete","TextField","id","label","value","onChange","event","target","select","type","Array","keys","map","index","MenuItem","key","Button","onClick","e","sort","a","b","initiative","sortByInitiative","concat","name","editing","slice","RoundAndTurn","count","currentTurn","setCurrentTurn","roundNumber","setRoundNumber","Typography","noWrap","nextTurn","disabled","Character","character","handleClick","IconButton","ListItemText","primary","secondary","EditCharacter","handleToggleEdit","handleChange","i","MyDivider","Divider","color","display","variant","message","InitiativeList","initiativeList","handleInitiativeToggleEdit","handleInitiativeListRemove","handleInitiativeListEdit","handleInitiativeListCopy","length","List","characterList","array","offset","tmp","removed","splice","rearrangeList","ListItem","alignItems","ListItemSecondaryAction","setItem","window","localStorage","getItem","JSON","parse","root","drawer","characterAddButton","float","App","setInitiativeList","useEffect","stringify","Container","ExpansionPanel","ExpansionPanelSummary","expandIcon","ExpansionPanelDetails","sortedList","Object","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.6931913a.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Menu } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    characterAdd: {\r\n        width: '100%',\r\n        maxWidth: 360,\r\n        backgroundColor: theme.palette.background.paper,\r\n    }\r\n}));\r\n\r\nexport default function AddCharacter(props) {\r\n    console.log(\"add character props\", props);\r\n    const [newName, setNewName] = useState('');\r\n    const handleNewNameChange = event =>setNewName(event.target.value);\r\n  \r\n    const [newInitiative, setNewInitiative] = useState(1);\r\n    const handleNewInitiativeChange = event =>setNewInitiative(event.target.value);\r\n\r\n    const {list, saveList} = props;\r\n    const classes = useStyles();\r\n\r\n    const OneToFifty = ()=>[...Array(50).keys()].map((index)=>(<MenuItem key={index+1} value={index+1}>{index+1}</MenuItem>))\r\n    \r\n  const sortByInitiative=(list)=>{list.sort((a,b)=>b.initiative-a.initiative);return list;}\r\n    const AddCharacter = (newName,newInitiative)=>saveList(sortByInitiative(list.concat({name: newName, initiative: newInitiative, editing:false}).slice()))\r\n\r\n    return (\r\n        <div className={classes.characterAdd} autoComplete=\"off\">\r\n            <TextField \r\n            id=\"character-name\" \r\n            label=\"Name\"\r\n            value={newName}\r\n            onChange={handleNewNameChange}\r\n            />\r\n            <TextField\r\n            id=\"initiative-result\"\r\n            label=\"Initiative\"\r\n            select\r\n            type=\"number\"\r\n            value={newInitiative}\r\n            onChange={handleNewInitiativeChange}\r\n            >\r\n            {OneToFifty()}\r\n            </TextField>\r\n            <Button\r\n            onClick={(e)=>AddCharacter(newName, newInitiative)}\r\n            >Add</Button>  \r\n        </div>);\r\n}","import React, {useState} from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    RoundAndTurn: {\r\n        width: '100%',\r\n        maxWidth: 360,\r\n        backgroundColor: theme.palette.background.paper,\r\n    }\r\n}));\r\n\r\nexport default function RoundAndTurn(props) {\r\n    const {count, currentTurn, setCurrentTurn} = props;\r\n    const [roundNumber, setRoundNumber]=useState(1);\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.RoundAndTurn}>\r\n        <Typography noWrap>Round: {roundNumber}</Typography>\r\n        {(count)?\r\n        <>\r\n            <Button\r\n            onClick={e=>{\r\n                const nextTurn = (currentTurn+1)%count;\r\n                setCurrentTurn(nextTurn);\r\n                if(nextTurn===0) setRoundNumber(roundNumber+1)\r\n            }}>Next Turn</Button>\r\n            <Button\r\n            onClick={e=>{\r\n                const prevTurn = (currentTurn===0)?count-1:currentTurn-1;\r\n                setCurrentTurn(prevTurn);\r\n                if(currentTurn===0){ setRoundNumber(roundNumber-1) }\r\n            }}\r\n            disabled={(roundNumber<=1&&currentTurn===0)?true:false}\r\n            >Prev Turn</Button>\r\n            <Button\r\n            onClick={e=>{setRoundNumber(0);setCurrentTurn(0)}}>Reset</Button>\r\n         </>\r\n          :<Typography noWrap>Add a Character</Typography>}\r\n        </div>);\r\n}","import React from 'react';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nexport default function Character(props)\r\n{\r\n    const {character, handleClick} = props;\r\n    return (<>\r\n    <IconButton\r\n      onClick={handleClick}>\r\n      <EditIcon/>\r\n    </IconButton>\r\n    <ListItemText\r\n      primary={character.name}\r\n      secondary={character.initiative}\r\n    />\r\n  </>);\r\n}","import React from 'react';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nexport default function EditCharacter(props)\r\n{\r\n    const {index, character, handleToggleEdit, handleChange} = props;\r\n    \r\n    const OneToFifty = ()=>[...Array(50).keys()].map((i)=>(<MenuItem key={i} value={i+1}>{i+1}</MenuItem>))\r\n    return (\r\n    <>\r\n      <IconButton\r\n        onClick={handleToggleEdit}>\r\n        <SaveIcon/>\r\n      </IconButton>\r\n      <TextField\r\n        //id={\"edit-initiative-\"+index}\r\n        select\r\n        type=\"number\"\r\n        label=\"Init\"\r\n        value={character.initiative}\r\n        onChange={e=>handleChange(index,{initiative:e.target.value})}\r\n      >\r\n        {[...Array(50).keys()].map((i)=>(<MenuItem key={i} value={i+1}>{i+1}</MenuItem>))}\r\n      </TextField>\r\n      <TextField \r\n      id={\"edit-name-\"+index} \r\n      label=\"Name\"\r\n      value={character.name}\r\n      onChange={e=>handleChange(index,{name:e.target.value})}\r\n      />\r\n      </>);\r\n}","import React from 'react';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nexport default function MyDivider(props)\r\n{\r\n    return (<> <Divider/>\r\n        <li>\r\n          <Typography\r\n            color=\"textSecondary\"\r\n            display=\"block\"\r\n            variant=\"caption\"\r\n          >\r\n            {props.message}\r\n          </Typography>\r\n        </li>\r\n        </>);\r\n}","import React from 'react';\r\n\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport CopyIcon from '@material-ui/icons/PlusOne';\r\n\r\nimport Character from './Character';\r\nimport EditCharacter from './EditCharacter';\r\nimport MyDivider from './MyDivider';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    InitiativeList: {\r\n        width: '100%',\r\n        maxWidth: 360,\r\n        backgroundColor: theme.palette.background.paper,\r\n    }\r\n}));\r\n\r\nexport default function InitiativeList(props) {\r\n\r\n    const {initiativeList, handleInitiativeToggleEdit, handleInitiativeListRemove, handleInitiativeListEdit, handleInitiativeListCopy, currentTurn} = props;\r\n    const classes = useStyles();\r\n\r\n    const rearrangeList = (array, offset)=>{let tmp = array.slice();let removed = tmp.splice(0,offset);return [...tmp,...removed]}\r\n\r\n    const count = initiativeList.length;    \r\n\r\n    return (\r\n        <List className={classes.characterList}>\r\n        {\r\n        rearrangeList(initiativeList,currentTurn).map((character,index)=>(console.log(\"index, current turn, offset\", index, currentTurn,(index+currentTurn)%count)||\r\n        <>\r\n          <MyDivider message={((index===0)?\"- Current Turn \":\"\")+(((index+currentTurn)%count===0)?\"- Top of the Round \":\"\")}/>\r\n          <ListItem \r\n            key={'character-'+index} \r\n            alignItems='flex-start'>\r\n            {(character.editing)?\r\n            <EditCharacter \r\n              index={(index+currentTurn)%count} \r\n              character={character} \r\n              handleToggleEdit={handleInitiativeToggleEdit((index+currentTurn)%count)} \r\n              handleChange={handleInitiativeListEdit}/>\r\n            :<Character \r\n              character={character} \r\n              handleClick={handleInitiativeToggleEdit((index+currentTurn)%count)}/>\r\n            }\r\n            <ListItemSecondaryAction>\r\n            <IconButton\r\n                onClick={handleInitiativeListCopy((index+currentTurn)%count)}>\r\n                <CopyIcon/>\r\n              </IconButton>\r\n              <IconButton\r\n                onClick={handleInitiativeListRemove((index+currentTurn)%count)}>\r\n                <DeleteIcon/>\r\n              </IconButton>\r\n            </ListItemSecondaryAction>\r\n          </ListItem>\r\n          </>))\r\n        }\r\n      </List>\r\n      );\r\n}","const storageID = \"initiative-tracker-\";\r\n\r\nconst setItem = (key, value)=>{\r\n    window.localStorage.setItem(storageID+key,value)\r\n};\r\n\r\nconst getItem = (key)=>{\r\n    return JSON.parse(window.localStorage.getItem(storageID+key));\r\n};\r\n\r\nexport {setItem, getItem};","import React, {useState, useEffect} from 'react';\n\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport './App.css';\n\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport Drawer from '@material-ui/core/Drawer';\nimport Container from '@material-ui/core/Container';\n\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography'\nimport AddCharacter from './AddCharacter'\nimport RoundAndTurn from './RoundAndTurn'\nimport InitiativeList from './InitiativeList'\nimport { getItem, setItem } from './Storage';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width:'100%'\n  },\n  characterList: {\n    width: '100%',\n    backgroundColor: theme.palette.background.paper,\n  },\n  characterAdd: {\n    width: '100%',\n    backgroundColor: theme.palette.background.paper,\n  },\n  drawer: {\n    width: '100%',\n    backgroundColor: theme.palette.background.paper,\n  },\n  characterAddButton:{\n    float:'right'\n  }\n}));\n\n\nfunction App(props) {\n\n  const classes = useStyles();\n\n  //Gotta find a better spot for this\n  const [initiativeList, setInitiativeList] = useState(getItem('initiativeList')||[]);\n  const saveList = list=>{setInitiativeList(list);\n  setItem('initiativeList',JSON.stringify(list));}\n\n  const handleInitiativeToggleEdit = index=>event=>{\n    initiativeList[index].editing=!initiativeList[index].editing; \n    const sortedList=sortByInitiative(initiativeList.slice());\n    setInitiativeList(sortedList);\n    setItem('initiativeList',JSON.stringify(sortedList));}\n  const handleInitiativeListRemove = index=>event=>{\n    initiativeList.splice(index,1);\n    setInitiativeList(initiativeList.slice());\n    setItem('initiativeList',JSON.stringify(initiativeList));}\n  const handleInitiativeListCopy = index=>event=>{\n\n    initiativeList.splice(index,0,{...initiativeList[index]}); //TODO: Fixme, shallow copy not ideal\n    setInitiativeList(initiativeList.slice());\n    setItem('initiativeList',JSON.stringify(initiativeList));}\n  const handleInitiativeListEdit = (index,value)=>{\n    let [key] = Object.keys(value);\n    console.log(\"key\",key, value)\n    console.log(\"at index\",initiativeList[index])\n    initiativeList[index][key]=value[key]\n\n    //initiativeList.splice(index,1,{...initiativeList[index],value});\n    setInitiativeList(initiativeList.slice());\n  }\n  const sortByInitiative=(list)=>{list.sort((a,b)=>b.initiative-a.initiative);return list;}\n\n  const [currentTurn, setCurrentTurn]=useState(0);\n\n  useEffect(()=>{\n    console.log(\"getItem\", getItem('initiativeList'))\n    setInitiativeList(getItem('initiativeList')||[]);\n    return ()=>setItem('initiativeList',JSON.stringify(initiativeList));\n  },[]);\n\n  useEffect(()=>{setInitiativeList(sortByInitiative(initiativeList));return ()=>setInitiativeList(sortByInitiative(initiativeList));},[initiativeList])\nconsole.log(\"My List\",initiativeList);\n  return (\n    <Container maxWidth=\"sm\" className={classes.root}>\n      <ExpansionPanel>\n        <ExpansionPanelSummary\n          expandIcon={<AddIcon />}>\n          <Typography>Add Character</Typography>\n        </ExpansionPanelSummary>\n        <ExpansionPanelDetails>\n          <AddCharacter \n            list={initiativeList}\n            saveList={saveList}/>\n        </ExpansionPanelDetails>\n      </ExpansionPanel>\n      <RoundAndTurn \n        count={initiativeList.length} \n        currentTurn={currentTurn} \n        setCurrentTurn={setCurrentTurn} />\n      <InitiativeList \n        initiativeList={initiativeList} \n        setInitiativeList={setInitiativeList}\n        handleInitiativeToggleEdit= {handleInitiativeToggleEdit}\n        handleInitiativeListRemove={handleInitiativeListRemove}\n        handleInitiativeListEdit={handleInitiativeListEdit}\n        handleInitiativeListCopy={handleInitiativeListCopy}\n        currentTurn={currentTurn}/>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}